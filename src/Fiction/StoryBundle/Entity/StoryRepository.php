<?php

namespace Fiction\StoryBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * StoryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class StoryRepository extends EntityRepository
{

	public function getFilteredStories($data, $perPage, $page = 1)
	{
		$query = $this->createQueryBuilder('f');
		
		$categoryIdArray = array ();
		$data->getStoryCategories()->first();
		for($i = 0; $i < $data->getCategories()->count(); $i++)
		{
			$categoryIdArray [] = $data->getCategories()
				->current()
				->getId();
			$data->getCategories()->next();
		}
		
		$query->select('f, SIZE(f.chapters) AS chapter_count');
		
		for($i = 0; $i < count($categoryIdArray); $i++)
		{
			$query->orWhere(':c_id' . $i . ' MEMBER OF f.categories')->setParameter(
					':c_id' . $i, $categoryIdArray [$i]);
		}
		
		/*
        TODO
        if ($data->getWorldType())
		{
			$query->andWhere($query->expr()
				->eq('f.world_type', ':type'))
				->setParameter(':type', $data->getWorldType());
		}*/
        
		if ($data->getTitle())
		{
			$query->andWhere($query->expr()
				->like('f.title', ':title'))
				->setParameter(':title', '%' . $data->getTitle() . '%');
		}
		if ($data->getDescription())
		{
			$query->andWhere($query->expr()
				->like('f.description', ':description'))
				->setParameter(':description', '%' . $data->getDescription() . '%');
		}
		
		$query->orderBy('f.updated_at', 'DESC')
		->setFirstResult(($page - 1) * $perPage)
		->setMaxResults($perPage);
		
		// $query->andWhere(
		// $query->expr()->andX(
		// $query->expr()->eq('f.world_type', ':type'),
		// $query->expr()->like('f.title', ':title'),
		// $query->expr()->like('f.description', ':description')));
		// $query->setParameter(':type', $data->getWorldType())
		// ->setParameter(':title', '%'.$data->getTitle().'%')
		// ->setParameter(':description', '%'.$data->getDescription().'%');
		
		return $query->getQuery()->getResult();
	}

	public function findStories($perPage, $page = 1)
	{
		$query = $this->createQueryBuilder('f');
		
		$query->select('f, SIZE(f.chapters) AS chapter_count')
			->orderBy('f.updated_at', 'DESC')
			->setFirstResult(($page - 1) * $perPage)
			->setMaxResults($perPage);
		
		return $query->getQuery()->getResult();
	}

	public function findUserStory($storyId, $user)
	{
		$query = $this->createQueryBuilder('f');
		
		$query->select('f')
			->where(
				$query->expr()
					->andX($query->expr()
					->eq('f.user', ':user'), $query->expr()
					->eq('f.id', ':id')))
			->setParameter(':user', $user)
			->setParameter(':id', $storyId);
		
		return $query->getQuery()->getOneOrNullResult();
	}

	public function getTotalStories()
	{
		return $this->getEntityManager()
			->createQuery('SELECT COUNT(f.id) FROM FictionStoryBundle:Story f')
			->getSingleScalarResult();
	}

	public function getTotalFilteredStories($data)
	{
		$query = $this->createQueryBuilder('f');
		$data->getStoryCategories()->first();
		$categoryIdArray = array ();
		for($i = 0; $i < $data->getStoryCategories()->count(); $i++)
		{
			$categoryIdArray [] = $data->getStoryCategories()
				->current()
				->getId();
			$data->getStoryCategories()->next();
		}
		
		$query->select('COUNT(f.id)');
		
		for($i = 0; $i < count($categoryIdArray); $i++)
		{
			$query->orWhere(':c_id' . $i . ' MEMBER OF f.categories')->setParameter(
					':c_id' . $i, $categoryIdArray [$i]);
		}
		
		/*
        TODO
        if ($data->getWorldType())
		{
			$query->andWhere($query->expr()
				->eq('f.world_type', ':type'))
				->setParameter(':type', $data->getWorldType());
		}*/
		if ($data->getTitle())
		{
			$query->andWhere($query->expr()
				->like('f.title', ':title'))
				->setParameter(':title', '%' . $data->getTitle() . '%');
		}
		if ($data->getDescription())
		{
			$query->andWhere($query->expr()
				->like('f.description', ':description'))
				->setParameter(':description', '%' . $data->getDescription() . '%');
		}
		
		return $query->getQuery()->getSingleScalarResult();
	}

	/*
    TODO
    public function getTotalChildWorlds($worldId)
	{
		$query = $this->createQueryBuilder('f');
		
		$query->select('COUNT(f.id)')
			->leftJoin('f.parents', 'p', 'WHERE', 'p.id = :id')
			->setParameter(':id', $worldId);
		
		return $query->getQuery()->getSingleScalarResult();
	}*/
}
